// SPDX-License-Identifier: Apache-2.0
pragma solidity 0.8.16;

import "../src/UpgradeExecRouteBuilder.sol";
import "@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol";

import "forge-std/Test.sol";

contract UpgradeExecRouteBuilderTest is Test {
    // test that aip1.2 would have been created with the same call data if it had used
    // the route builder
    function testAIP1Point2() public {
        address arbSys = 0x0000000000000000000000000000000000000064;
        address l1TimelockAddress = 0xE6841D92B0C345144506576eC13ECf5103aC7f49;
        // generated using the an altered proposal creator that calls scheduleBatch instead of schedule
        bytes memory aipData =
            hex"8f2a0bb000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000067565fcc91c79be6e957056bdf0ed93287216afcc5ea02fec16f1900a177a3c5000000000000000000000000000000000000000000000000000000000003f4800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a723c008e76e379c55599d2e4d93879beafda79c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001800000000000000000000000004dbd4fc535ac27206064b68ffcf827b0a60bab3f000000000000000000000000cf57572261c7c2bcf21ffd220ea7d1a27d40a82700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000841cff79cd0000000000000000000000006274106eedd4848371d2c09e0352d67b795ed51600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000004b147f40c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        address aip1Point2ActionAddress = 0x6274106eedD4848371D2C09e0352d67B795ED516;
        bytes32 aip1Point2TimelockSalt =
            0x67565fcc91c79be6e957056bdf0ed93287216afcc5ea02fec16f1900a177a3c5;

        ChainAndUpExecLocation[] memory chainLocations = new ChainAndUpExecLocation[](1);
        chainLocations[0] = ChainAndUpExecLocation({
            chainId: 42_161,
            location: UpExecLocation({
                upgradeExecutor: 0xCF57572261c7c2BCF21ffD220ea7d1a27D40A827,
                inbox: 0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f
            })
        });

        UpgradeExecRouteBuilder routeBuilder = new UpgradeExecRouteBuilder(
            chainLocations,
            l1TimelockAddress,
            259200
        );

        uint256[] memory chainIds = new uint256[](1);
        chainIds[0] = 42_161;
        address[] memory actionAddresses = new address[](1);
        actionAddresses[0] = aip1Point2ActionAddress;
        (address to, bytes memory data) = routeBuilder.createActionRouteDataWithDefaults(
            chainIds, actionAddresses, aip1Point2TimelockSalt
        );

        assertEq(to, arbSys);
        assertEq(
            data, abi.encodeWithSelector(ArbSys.sendTxToL1.selector, l1TimelockAddress, aipData)
        );
    }
}
